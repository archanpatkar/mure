const mure = require('../src/index')

test('mure.isValid', () => {
  expect(mure.isValid('MI')).toBe(true)
  expect(mure.isValid('MUU')).toBe(true)
  expect(mure.isValid('MUIII')).toBe(true)
  expect(mure.isValid('MUuI')).toBe(true)
  expect(mure.isValid('Mui')).toBe(true)
  expect(mure.isValid('Mlk')).toBe(false)
  expect(mure.isValid('uuiiI')).toBe(true)
  expect(mure.isValid('zzzZzZ')).toBe(false)
})

test('mure.canApply', () => {
  expect(mure.canApply('MI', 1)).toBe(true)
  expect(mure.canApply('MI', 2)).toBe(true)
  expect(mure.canApply('MI', 3)).toBe(false)
  expect(mure.canApply('MI', 4)).toBe(false)
  expect(mure.canApply('MUU', 1)).toBe(false)
  expect(mure.canApply('MUU', 2)).toBe(true)
  expect(mure.canApply('MUU', 3)).toBe(false)
  expect(mure.canApply('MUU', 4)).toBe(true)
  expect(mure.canApply('MIII', 1)).toBe(true)
  expect(mure.canApply('MIII', 2)).toBe(true)
  expect(mure.canApply('MIII', 3)).toBe(true)
  expect(mure.canApply('MIII', 4)).toBe(false)
  expect(mure.canApply('MUI', 1)).toBe(true)
  expect(mure.canApply('MUI', 2)).toBe(true)
  expect(mure.canApply('MUI', 3)).toBe(false)
  expect(mure.canApply('MUI', 4)).toBe(false)
  expect(() => mure.canApply('MUI', 6)).toThrow()
})

test('mure.canApplyWhich', () => {
  expect(mure.canApplyWhich('MiI')).toEqual(expect.arrayContaining([1, 2]))
  expect(mure.canApplyWhich('MUI')).toEqual(expect.arrayContaining([1, 2]))
  expect(mure.canApplyWhich('MIUU')).toEqual(expect.arrayContaining([2, 4]))
  expect(mure.canApplyWhich('MIIIU')).toEqual(expect.arrayContaining([2, 3]))
  expect(mure.canApplyWhich('MIIUI')).toEqual(expect.arrayContaining([1, 2]))
  expect(mure.canApplyWhich('MIUUIII')).toEqual(expect.arrayContaining([1, 2, 3, 4]))
})

test('mure.applyRule', () => {
  expect(mure.applyRule('MiI', 1)).toBe('MIIU')
  expect(mure.applyRule('MiI', 2)).toBe('MIIII')
  expect(() => mure.applyRule('MiI', 3)).toThrow()
  expect(() => mure.applyRule('MiI', 4)).toThrow()
  expect(mure.applyRule('MUI', 1)).toBe('MUIU')
  expect(mure.applyRule('MUI', 2)).toBe('MUIUI')
  expect(() => mure.applyRule('MUI', 3)).toThrow()
  expect(() => mure.applyRule('MUI', 4)).toThrow()
  expect(() => mure.applyRule('MIUU', 1)).toThrow()
  expect(mure.applyRule('MIUU', 2)).toBe('MIUUIUU')
  expect(() => mure.applyRule('MIUU', 3)).toThrow()
  expect(mure.applyRule('MIUU', 4)).toEqual(expect.arrayContaining(['MI']))
  expect(() => mure.applyRule('MIIIU', 1)).toThrow()
  expect(mure.applyRule('MIIIU', 2)).toBe('MIIIUIIIU')
  expect(mure.applyRule('MIIIU', 3)).toEqual(expect.arrayContaining(['MUU']))
  expect(() => mure.applyRule('MIIIU', 4)).toThrow()
  expect(mure.applyRule('MIIUI', 1)).toBe('MIIUIU')
  expect(mure.applyRule('MIIUI', 2)).toBe('MIIUIIIUI')
  expect(() => mure.applyRule('MIIUI', 3)).toThrow()
  expect(() => mure.applyRule('MIIUI', 4)).toThrow()
  expect(mure.applyRule('MIUUIII', 1)).toBe('MIUUIIIU')
  expect(mure.applyRule('MIUUIII', 2)).toBe('MIUUIIIIUUIII')
  expect(mure.applyRule('MIUUIII', 3)).toEqual(expect.arrayContaining(['MIUUU']))
  expect(mure.applyRule('MIUUIII', 4)).toEqual(expect.arrayContaining(['MIIII']))
  expect(mure.applyRule('MIIII', 3)).toEqual(expect.arrayContaining(['MUI', 'MIU']))
  expect(mure.applyRule('MUUIUU', 4)).toEqual(expect.arrayContaining(['MIUU', 'MUUI']))
  expect(() => mure.applyRule('kasdjfk', 3)).toThrow()
})
  
test('mure.applyAll', () => {
    expect(mure.applyAll('MI')).toEqual(expect.arrayContaining(['MIU', 'MII']))
    expect(mure.applyAll('MUI')).toEqual(expect.arrayContaining(['MUIU', 'MUIUI']))
    expect(mure.applyAll('MIUU')).toEqual(expect.arrayContaining(['MIUUIUU', 'MI']))
    expect(mure.applyAll('MIIIU')).toEqual(expect.arrayContaining(['MIIIUIIIU', 'MUU']))
    expect(mure.applyAll('MIIUI')).toEqual(expect.arrayContaining(['MIIUIU', 'MIIUIIIUI']))
    expect(mure.applyAll('MIUUIII')).toEqual(expect.arrayContaining(['MIUUIIIU', 'MIUUIIIIUUIII', 'MIUUU', 'MIIII']))
})

test('mure.possibility', () => {
    expect(mure.canApplyWhich('MiI')).toEqual(expect.arrayContaining([1, 2]))
    expect(mure.canApplyWhich('MUI')).toEqual(expect.arrayContaining([1, 2]))
    expect(mure.canApplyWhich('MIUU')).toEqual(expect.arrayContaining([2, 4]))
    expect(mure.canApplyWhich('MIIIU')).toEqual(expect.arrayContaining([2, 3]))
    expect(mure.canApplyWhich('MIIUI')).toEqual(expect.arrayContaining([1, 2]))
    expect(mure.canApplyWhich('MIUUIII')).toEqual(expect.arrayContaining([1, 2, 3, 4]))
})