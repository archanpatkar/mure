"use strict";function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}var mure={axiom:"MI"},symbols=["M","I","U",""," "],patt=[/III/gi,/UU/gi],M=symbols[0],I=symbols[1],U=symbols[2],extra=symbols.slice(3),err=function(a){if(a)throw new Error("Invalid MIU String");else throw new Error("Invalid Rule")},matchAll=function(a,b,c){return _toConsumableArray(a).reduce(function(d,e,f){return e===b?Array(c).fill(0).reduce(function(c,d,e){return a[f+e]===b},!0)?d.push({index:f,input:a})?d:d:d:d},[])},rules=[function(a){return a.endsWith(I)},function(a){return a[0]===M},function(a){return null!==a.match(patt[0])},function(a){return null!==a.match(patt[1])}],apply=[function(a){return a+=U},function(a){return a+=a.slice(1)},function(a){return matchAll(a,I,3).map(function(a){var b=!!(4<arguments.length&&arguments[4]!==void 0)&&arguments[4];return Array.from(a.input).map(function(c,d){return d>=a.index&&d<=a.index+2?b?"":(b=!0)&&U:c}).join("")})},function(a){return matchAll(a,U,2).map(function(a){return Array.from(a.input).filter(function(b,c){return c<a.index||c>a.index+1}).join("")})}];mure.isValid=function(a){return _toConsumableArray(a).reduce(function(a,b){return symbols.includes(b.toUpperCase())&&a},!0)},mure.canApply=function(a,b){return b-1 in rules?rules[b-1](a.toUpperCase()):err(0)},mure.applyRule=function(a,b){return mure.isValid(a)?mure.canApply(a,b)?apply[b-1](a.toUpperCase()):err(0):err(1)},mure.canApplyWhich=function(a){return rules.flatMap(function(b,c){return mure.canApply(a,c+1)?[c+1]:[]})},mure.possibility=function(a){var b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:mure.axiom;return Array(a).fill(0).reduce(function(a){return a[1].add(new Set(a[0]=a[0].map(function(a){return mure.canApplyWhich(a).map(function(b){return mure.applyRule(a,b)})}).flat(2)))?a:a},[Array.isArray(b)?_toConsumableArray(b):[b],new Set().add(new Set().add(b))])[1]},module.exports=Object.freeze(mure);